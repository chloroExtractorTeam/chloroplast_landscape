#+LaTeX_CLASS: scrartcl
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:nil title:nil 
#+LATEX: \begin{center}
#+LATEX: \thispagestyle{empty}
#+LATEX: \textbf{\huge Seperating the good from the bad... Exploring the genomic landscape of chloroplasts from genomic sequencing datatreduction Master Thesis}\\[1cm]
#+LATEX: \textbf{\LARGE }\\[1cm]
#+LATEX: {\LARGE Simon Pfaff}\\[2mm]
#+LATEX: \includegraphics[width=.7\linewidth]{/home/simon/BA-Thesis/neuSIEGEL.pdf}
#+LATEX: {\large Julius-Maximilians-Universität Würzburg}\\[3mm]
#+LATEX: {\large Fakultät für Biologie}
#+LATEX: \end{center}
#+LATEX: \cleardoublepage
#+LATEX: \
#+LATEX: \thispagestyle{empty}
#+LATEX: \maketitle
#+LATEX: \begin{center}
#+LATEX: \includegraphics[width=.5\linewidth]{/home/simon/BA-Thesis/neuSIEGEL.pdf}\\[1cm]
#+LATEX: {\large Julius-Maximilians-Universität Würzburg}\\
#+LATEX: {\large Betreuer: Dr. Markus Ankenbrandt}\\
#+LATEX: {\large Betreuer: Prof. Dr. Jörg Schulz}\\
#+LATEX: {\large Betreuer: Dr. Frank Förster}\\
#+LATEX: {\large Lehrstuhl für Bioinformatik / CCTB}
#+LATEX: \setcounter{page}{1}
#+LATEX: \clearpage
#+LATEX: \end{center}
#+LATEX: \tableofcontents
#+LATEX: \clearpage
* Intro
Seperating the good from the bad...
Exploring the genomic landscape of chloroplasts from genomic sequencing datatreduction
** Chloroplasten
Chloroplasten sind extrem wichtig, alle Pflanzen besitzen diese und nutzen sie um Energie in Form von ATP durch Photosynthese zu erzeugen.
Ihr Genom gilt als hoch konserviert, sowohl in der Gen Orientierung als auch dem Gen Inhalt [1]. Chloroplasten zeigen
eine auffällige Genom Struktur, das Genom ist ein einem Plasmid welches sich in drei Teile aufteilt. Dem Large Single Copy, dem 
Small Singles Copy, welche beide durch zwei Inverted repeats unterbrochen sind. Chloroplasten zeigen eine viel geringere Substitutions raten
als in Genomischer DNA, diese ist noch einmal signifikant geringer in den Inverted repeat Regionen [2]. Dennoch zeigen sich
Einzelnucleotid-Polymorphismen (SNPs). Zudem gibt es ein seltenen Fällen eine Genwanderung von Genen auf dem IR zum SSC, wodurch ein IR weg
fallen kann, sodass solche Chloroplasten nur noch ein IR besitzen [3] . Vor allem in gezüchteten Nutzpflanzen finden sich auch 
Invertierungen des IR [4]. Durch ihre hohe Konservierung sind Chloroplasten und ihre Gene sehr gut für Metabarcoding geeignet. Mit diesem
Barcoding können Pflanzen und ihre Varianten identifiziert werden. Neue Studien zeigen, dass der komplette Chloroplast selbst als ein Art "Ultra-barcode"
verwendet werden könnte, da die Variation in Chloroplasten in einer Spezies doch mehr variiert als angenommen [5]. 
** Big Data 
Die Big Data Ära zeichnet sich vor allem durch die Flut an Daten aus welche kaum zu Bewältigen ist. Im biologischen Sinne zeichnet sich diese 
Flut an Daten vor allem durch genomische Daten aus. Durch sogenannte Hochdurchsatz Methoden in modernen Sequenzierungs Technologien wie PacBio[29] oder Illumina[30]
sie verwenden können sehr viele genomische Daten in kurzer Zeit für vergleichsweise wenig Geld erzeugt werden. Um dieser Daten Herr zu werden sind vor allem
Programme die diese Daten auswerten wichtig. Die Anforderung an diese Programme sind unter anderem eine hohe Geschwindigkeit und vor allem eine hohe 
Automatisierbarkeit. Um solche Programme zu entwickeln sind vor allem Kenntnisse in Informatik und in Biologie notwendig. 
** Open Science
Mit der Flut der ansteigenden Daten wächst in den letzten Jahren auch immer mehr die Akzeptanz zur "Open Science".
"Open Science" bezeichnet eine Bewegung welche fordert dass Wissenschaft und alles was dazugehört, Daten, Programme, Ergebnisse öffentlich und für jedermann 
zugänglich sein soll. Befürworter dieser Bewegung argumentieren damit, dass Wissen für jedermann zugänglich sein sollte, und nicht nur für Ausgewählte oder gar
gegen Bezahlung. So steigere sich unter anderem die Akzeptanz der Wissenschaft als auch deren Glaubwürdigkeit. Da die Ergebnisse von jedem nachvollziehbar 
veröffentlicht werden müssen mit allen Rohdaten und Vorgehensweisen. Dies sei der eigentliche Gedanke hinter der Wissenschaft, sie solle jedem zugänglich sein!
Diese Bewegung findet vor allem bei jung Wissenschaftler aber auch bei älteren immer mehr Anklang. Mittlerweile gibt es mehrere Lizenz Modelle die unter
Open Science laufen welche Regeln wie die Daten verwendet werden dürfen oder müssen. Dies reicht von Freigeben der Daten und jeglichem Verwendungszweck bis hin
zum Zwang, dass alles was mit diesen Daten oder auch Programmen veröffentlicht wird wieder unter der gleichen Open Science Lizenz zu publizieren ist.
Alle hier verwendeten Programme und Daten sind unter Open Science Lizenzen veröffentlicht und alle Ergebnisse werden wiederum öffentlich verwendbar sein. 
Denn so sollte Wissenschaft sein!  

** Daten in Daten 
Bei den heutzutage geringen Kosten Daten, vor allem genomische Daten, zu erzeugen ist es nicht verwunderlich dass immer neue Daten generiert werden.
Dennoch steckt in bereits erhobenen Daten meist mehr Information als zunächst verwendet. In genomischen Daten zum Beispiel, hier findet sich meistens Daten 
von Organellen, wie Mitochondrien oder Chloroplasten, welche ihre eigene DNA besitzen. Diese sind dort zu finden da vor einer Sequenzierung häufig keine 
Kern Extraktion durchgeführt wird, da diese mehr Zeit und Geld kosten würde. Diese Organellen DNA können mit bestimmten Programmen gefiltert werden, hierfür 
wurde unter anderem der chloroExtractor programmiert. Dieser kann in genomischen Pflanzen Daten Chloroplasten DNA finden und diese verwenden um einen vollständigen
Chloroplasten bauen. Hiermit müssen somit keine neuen Sequenzierungen für Chloroplasten mehr durchgeführt werden, wenn man an Chloroplasten forschen möchte.
** Verwendete Programme und ihre Ansätze
Es gibt verschiedene Ansätze um Chloroplasten Genome bzw. ihre DNA aus genomischen Pflanzen Daten zu extrahieren. Die wohl einfachste Möglichkeit ist ein Referenz basiertes
Mapping der Daten auf einen Referenz Chloroplasten. Hierzu muss lediglich ein nah verwandter Chloroplast als Referenz benutzt werden. So können die Reads, welche auf diese Referenz
passen genommen werden und assembliert werden, mit der gleichen Referenz. Dies funktioniert allerdings nur wenn man eine passende Referenz benutzt, diese sollte von der gleichen Spezies oder
zumindest einer Nah verwandten Spezies stammen. Ein anderer Ansatz besteht darin den Chloroplasten de novo zu assemblieren, also ohne Referenz. Um diesen Ansatz zu benutzen müssen
aber zunächst die Reads mit Chloroplasten Genom aus den Daten gezogen werden. Hier gibt es wiederum verschiedene Möglichkeiten. Eine Möglichkeit ist es die Reads gegen eine Datenbank
von Chloroplasten Genen zu blasten, hierzu muss entweder eine Datenbank von Chloroplasten Genen gestellt werden oder der Benutzer muss eine Pseudo-Referenz einen sogenannten Seed angeben.
Ein Seed, was von einigen Basenpaaren bis zu einem kompletten Chloroplasten reichen kann, kann auch eingesetzt werden um durch ein reines Mapping Reads zu finden. Bei kleinen Seeds wird dieser
häufig durch gefundene Reads erweitert und eine Liste von Seed erstellt. Auch hier muss aber sichergestellt werden, dass der Seed in den Chloroplasten Daten vorhanden ist.
Von diesen Methoden gibt es auch Abwandlungen, wie z.b. das scannen der Daten durch Kmers, hier werden die Daten in verschiedene Kmers zerteilt, durch plotten dieser Kmers können
an spezifischen Stellen überrepräsentierte Kmers gefunden werden, diese überrepräsentierten Kmer spiegeln häufig Plasteome wieder. Diese sind unter anderem Chloroplasten aber auch
Mitochondrien, sie besitzen ihre eigene DNA und kommen im Schnitt häufiger vor als DNA welche im Zellkern zu finden ist. 
Abgesehen von den Ansätzen der Programme gibt es zwei verschiedene Arten von Programmen, die einen benutzen bereits vorhandene Programme wie Assambler, Mapper oder Kmer-counter. Diese 
Bauen eine Pipeline um diese Programme, sodass diese in der richtigen Reihenfolge mit den richtigen Parametern mit nur einem Befehl gesteuert werden können. Der Vorteil ist, solche Programme
sind einfacher zu warten da sie meist kleiner sind als Programme die dies nicht tun und einfacher zu Programmieren, allerdings sind sie von diesen drittanbieter Programmen abhängig und es können Probleme 
auftreten wenn diese Änderungen bzw. Updates ausgeben, weswegen meist die kompatiblen Versionen angegeben werden. Ein weiterer Nachteil, der Benutzer muss häufig weitere Programme, sogenannte Abhängigkeiten installieren
bevor er das eigentliche Programm nutzen kann. Die andere Möglichkeit ist es die komplette Maschinerie selbst zu Programmieren, dies ist sehr aufwendig und bedeutet viel Wartungsarbeit. Vorteil hier
ist das keine anderen Abhängigkeiten benötigt werden außer ein System welches das Programm verwenden kann. In dieser Arbeit wurden verschiedene Typen von Programmen verwendet.
*** chloroExtractor
Der chloroExtractor (Version 1.0.0 - 1.0.5) [9][10] ist eines der verwendeten Programme zum extrahieren von Chloroplasten
DNA aus Whole Genome Batches *ÜBERSETZUNG?*, es ist hauptsächlich in Perl5 geschrieben.
Es wurde 2018 von chloroExtractorTeam veröffentlicht [9]. ChloroExtractor benutzt eine Kombination
aus mappen mit Bowtie2 und kmer-basierendem suchen, um die Chloroplasten reads zu detektieren und zu extrahieren. Für das erstellen der kmers wird Jellyfish [12] verwendet.
Die gefunden reads werden mit SPAdes [24] assembliert, dies geschieht de novo, d.h. es ist keine Referenz von Nöten.
SPAdes verwendet eine De Brujin-Graphen Methode um die reads richtig zusammen zu fügen, und den Chloroplasten zu erzeugen. Des weiteren wird BLAST+[11] verwendet um
die einzeln Graphen Teile zu testen ob diese wirklich zu einem Chloroplasten gehören.  
#+LATEX: \begin{figure}
*ChloroExtractorAblauf.jpg  #TODO
#+LATEX: \caption[]{\textbf{} }
#+LATEX: \end{figure}

*** fast-plast
Fast-plast  (Version 1.2.8) [13] ist ein weiteres Programm, welches verwendet wird um Chloroplasten DNA zu finden. Es ist in Perl und in C++ programmiert und verwendet auch SPAdes, 
aber zusätzlich Bowtie1 sowie Bowtie2. Auch hier wird Blast+ verwendet um die richtigen reads zu finden. 
*** NOVOPlasty
Im Gegensatz zu den anderen verwendeten Programmen, benutzt NOVOPlasty (Version 2.6.8 - 2.7.0 )[14][15] keine dritt Anbieter Programme. Es benötigt somit keine Abhängigkeiten von deren Programmen
und ist komplett in Perl programmiert. NOVOPlasty benutzt sogenannte seeds um Chloroplasten DNA zu finden, dies können einzelne Chloroplasten Gene sein, aber auch in kompletter
Chloroplast. 
*** Org.ASM
Org.ASM ( Version 1.0.00-alpha11) [16] ist ein Programm hauptsächlich geschrieben in Python. Es versucht überrepräsentierte Sequenzen zu finden und diese zu assemblieren[17]. 
Mit Hilfe eines Seeds versucht er diese Sequenzen zu finden. Da Chloroplasten und andere Organellen wie Mitochondrien in Zellen überrepräsentiert sind, vor allem
wenn man eine geringe Coverage über das Pflanzen Genom hat, sind diese somit detektierbar[27].
*** GetOrganelle
GetOrganelle (Version 1.0.1 - 1.0.3 )[18][19] verwendet zum lokieren der Chloroplasten reads ähnlich wie andere Programme Bowtie2 [20] und Blast+, nur muss hier eine Referenz mitgegeben werden. Diese wird nur hierfür
verwendet, das assemblieren hingegen geschieht de novo mit SPAdes. Wie auch beim chloroExtractor wird hier  der fastg-Graph verwendet um den Chloroplasten zu finden, aber dies muss in falle 
des GetOrganelle per Hand, mit Hilfe des Programms Bandage vollzogen werden. 
*** IOGA
Der Iterative Organellar Genome Assambly, kurz IOGA (Keine Versionsnummer vergeben)[21][22] verwendet BBmap [23] für das filtern und trimmen der reads, um anschließend mit SOAPdenovo2 [25] und SPAdes [24] die reads zu assemblieren. 
Auch dieses Programm benötigt eine Referenz. Der IOGA ist in Python geschrieben.

** Interesse an Chloroplasten, was tun damit mit diesen Daten?
Mit der steigenden Anzahl an frei erhältlichen Chloroplasten Genomen, welche gegen ende 2016 erstmals die 1000 Genome überschritten hat[42], können immer mehr Versuche mit vielen Chloroplasten durchgeführt werden.
So ist immer nicht geklärt wie genau die Replikation von Plastiden Genomen wie Chloroplasten wirklich funktioniert. Wie werden Mutationen im Inverted Repeat repariert oder bei der Replikation auf beide IRs übernommen.
Da SNPs im IR immer auf beiden gefunden werden. Welche Mutationen treten am häufigsten auf und wie sind diese evtl. an die Struktur des Genoms gekoppelt [43]. Auch ist immer noch nicht exakt verstanden wie Chloroplasten
vererbt werden, es wird zwar angenommen das diese ähnlich wie Mitochondrien maternal vererbt werden doch gibt es bei Pflanzen auch viele Arten die biparental oder uniparental Chloroplasten vererben[44]. Die in den letzten 
Jahren stark steigende Anzahl an Chloroplasten Genomen gibt diesen Fragestellungen neue Rohdaten die diese Probleme evtl. lösen können. Auch Probleme die nur mit kleinen Änderungen im Chloroplasten Genom zu tun haben (wie SNPs)
können so auf den Grund gegangen werden, z.B. die Adaption von verschiedenen Chloroplasten Genen in das Pflanzengenom und der daraus folgenden Änderung im Photosynthese Systems[45]. Auch kann ohne große Änderung an der
kodierenden Sequenz, alleine durch Änderung an Transkriptionsfaktoren oder deren Level viel Einfluss auf solche Systeme genommen werden, welche natürlich auch mit dem Chloroplasten zusammenhängen.

** Aufgaben in der Master Thesis 
Die Aufgaben dieser Thesis ist grob in drei Teile eingeteilt. Zunächst sollen die verschiedenen Programme, der chloroExtractor [9][10], fast-plast[13], IOGA[21][22], GetOrganelle[18][19],
Org.ASM [16]und NOVOPlasty[14][15] verglichen werden und herausgefunden werden welche das oder die besten Programme sind um damit so viele Chloroplasten Genome zu erzeugen wie 
möglich. Hier soll vor allem darauf geachtet werden dass die Programme Automatisierbar sind um einen hohen Durchsatz zu haben, und auf die Ressourcen, da der Verbrauch von Rechenleistung
andere Arbeiten am CCTB nicht stören soll. Der zweite Teil ist das Produzieren von Chloroplasten Genomen, hierzu werden die Pflanzen Genome des 1001 Genom Projektes verwendet. Auf den so
Produzierten Chloroplasten sollen verschiedene wissenschaftliche Arbeiten durchgeführt werden, so zum Beispiel eine Varianz Analyse sowie eine Genomweite Assoziationsstudie, kurz GWAS [31].
Eine GWAS versucht bestimmte Traits, also Eigenschaften mit Genomischen Varianten zu assoziieren, um anschließend eine Aussage darüber treffen zu können ob diese Variante einen Einfluss auf diese 
Eigenschaft hat oder nicht. Hierzu werden die einzelnen Chromosomen einzeln oder als komplettes Genom angesehen, je nach Ansatz oder Fragestellung.
Auch sollte eine Struktur Varianz Analyse durchgeführt werden. Zudem könnten diese Daten benutzt werden um Chloroplasten besser als Genetische Marker zu benutzen. 



   
* Material / Methoden
** Evaluation der Programme
Um die oben genannten Programme zu vergleichen habe ich mir verschiedene Ansätze überlegt.
Um zunächst zu testen wie genau die Programme funktionieren und ob diese überhaupt funktionieren,
habe ich sie auf dem Testset SRR5216995 mit eine Millionen reads getestet. Dieses Set war das erste
auf dem wir den chloroExtractor in der Betaphase getestet hatten und erfolgreich waren. Um eine 
Automatisierung zu erhalten muss für jedes Programm ein Dockercontainer gebaut werden, falls nicht 
schon einer vorhanden ist, letzteres trifft nur für den chloroExtractor zu. Um das Ziel zu erreichen
so viele Chloroplasten wie möglich zu extrahieren, musste eine Automatisierungslösung für alle Programme
erstellt werden, damit keine evtl. Manuelle Schritte oder Auswertungen der zeitbestimmende Schritt sind.
Um dies zu erreichen musste ich zusätzlich einige Bash Skripte *ANHANG?* schrieben welche eine volle
Automatisierung ermöglichen.   
*** Daten: Simulierte Daten
Um zu Testen wie gut die verschiedenen Programme mit unterschiedlichen Anteilen von Chloroplasten DNA in
Genom Daten zurechtkommen wurden drei verschiedene Testdatensätze simuliert(Genom : Chloroplast - 1:10, 1:100, 1:1000). 
Mit diesen sollte auch getestet werden ob die Programme mit viel oder wenig Chloroplasten DNA Anteil zurecht kommen oder einen dieser Fälle 
bevorzugen. Diese Testdatensätze wurden mit ART[6][7] erzeugt. ART wird dazu verwendet Short-reads zu erzeugen. 
Hierzu wurden Arabidopsis Thaliana (TARIR10 [8]) Daten verwendet. Mitochondrien DNA wurde nicht mit simuliert, da diese zu 
Problemen führen könnte wenn diese aufgrund ihrer ähnlichen Häufigkeit für Chloroplasten DNA identifiziert werden. 
Um die verschiedenen Verhältnisse von Genom und Chloroplasten zu bekommen wurden die Chloroplasten Daten einfach
vervielfältigt und anschließend zusammen kopiert. Hiernach wurden sie mit folgenden ART Kommandos zu short-reads simuliert.

'art_illumina [options] -i <INPUT_SEQ_FILE> -l <READ_LEN> -f <FOLD_COVERAGE> -o <OUTPUT_FILE_PREFIX> -m <MEAN_FRAG_LEN> -s <STD_DE>'
'1:10 : ./art_illumina -p -i sequence-arabidopsis-thaliana-kern-chl-1zu10.fa -l 150 -f 100 -o a_thaliana_1_10_sim -m 500 -s 150'
'1:100 :  ./art_illumina -p -i sequence-arabidopsis-thaliana-kern-chl-1zu100.fa -l 150 -f 100 -o a_thaliana_1_100_sim -m 500 -s 150'
'1:1000 :  ./art_illumina -p -i sequence-arabidopsis-thaliana-kern-chl-1zu1000.fa -l 150 -f 100 -o a_thaliana_1_1000_sim -m 500 -s 150'

*** Daten: 1001 Genom Projekt 
Um einen ersten Eindruck über die Programme und deren Erfolgsrate zu bekommen wurden parallel zu den Tests mit simulierten Daten, die ersten Tests mit realen Datensätzen vorgenommen. 
Hierzu wurden Daten aus dem 1001 Genom Projekt[26] verwendet, dies sind alles Arabidopsis thaliana. Es wurden 11 Datensätze ( SRR1945435 - SRR1945445 ) verwendet. Diese sind alle
frei verfügbar und wurden von NCBI heruntergeladen. 

*** Daten: GetOrganelle-Paper preprint
Um zu weitere Testdaten zu ermitteln und ein Urteil darüber zu fällen welche Programme weiter verwendet werden,
wurden 57 Datensätze welche im GetOrganelle Paper [19] verwendet wurden
auf allen Programmen getestet. In dieser Arbeit wurden bei 47 Datensätzen von 57, mit
dem GetOrganelle erfolgreich zirkuläre Chloroplasten extrahiert. Diese Daten sind auch frei zugänglich und wurden
von NCBI heruntergeladen. 

*** Welche Programme werden weiter verwendet.     
Um alle Daten aus dem 1001 Genom Projekt (1135 Datensätze) zu berechnen, mussten aufgrund 
von Hardwaretechnischen Limitierungen die besten Programme ausgewählt werden. Diese Programme müssen in
in Geschwindigkeit sowie in Erfolgs- und Fehlerrate überzeugen. Desweiteren müssen diese Programme gut automatisierbar sein, 
d.h. am besten mit nur Befehl gestartet werden können, sodass kein weiterer Aufwand anfällt. Dies gilt
vor allem auch bei der Wahl der Parameter mit denen das Programm gestartet wird. Diese können nicht 
für jeden Datensatz angepasst werden, was bedeutet dass die Standardparameter verwendet werden.
Dies ist notwendig um einen hohen Durchsatz an Berechnungen zu ermöglichen.
**** Installation & Automatisierung
Alle Programme konnten mit Hilfe von einigen Skripts und dem erstellen eines Dockercontainers, so 
automatisiert werden das sie einen hohen Durchsatz erreichen können. Das Einzige Programm welches
einen Händischen Schritt benötigt ist der GetOrganelle, hier muss die fastg Datei in Bandage
geöffnet werden und der zirkuläre Chloroplast selbst heraus gesucht werden.
Bei den verschiedenen Skripts handelt es sich vor allem um Start-Skripts. Aber es mussten auch ein paar 
kleine Skripts verwendet werden um kleine Bugs zu fixen. So kann der IOGA keine unter Ordner verwenden da er sonnst
versucht auf Falsche Dateien zuzugreifen und abstürzt. Dies scheint ein Bug in einem Splitt Befehl zu sein. Beim GetOrganelle mussten
zusätzliche Befehle eingebaut werden damit SPAdes keine Fehlermeldungen bringt und abbricht, da er bestimmte Funktionen (hammer.py) nicht ausführen konnte
welche für eine Fehler Korrektur verwendet werden, welche GetOrganelle gar nicht nutzt. Org.ASM konnte nur erfolgreich in einem Dockercontainer
installiert werden, da dieses Programm sonnst verschiedenste Fehlermeldungen brachte. Alle Programme welche PERL verwenden, also
chloroExtractor, fast-plast und NOVOPlasty, brachten Fehlermeldungen, da innerhalb des Dockercontainers Globale Variablen nicht vollständig gesetzt waren. 
Diese Fehler waren aber nicht fatal, und konnten mit dem setzten dieser Variable leicht entfernt werden. 
Für jedes Programm wurde ein Skript geschrieben welches die Laufzeit überprüft und wenn dieses fertig ist danach eine Auswertung startet.
Dieses Auswertungsskript überprüft die ausgegebene Log Datei sowie die finale Fasta-Datei und entscheidet automatisch ob ein 
zirkulärer Chloroplast erzeugt wurde oder nicht. Diese Entscheidung wird unter anderem getroffen je nachdem was das Programm in seinem 
Log ausgibt, aber auch darüber wie viele Sequenzen im endgültigen Fasta sind, und wie groß die Sequenz ist und ob dies einem Chloroplasten
entsprechen kann.
 
**** Erfolgsrate
Nächster Kritikpunkt nachdem gefiltert wurde welche Programme verwendet werden, war die Erfolgs rate.
Sowohl bei den Daten des 1001 Genom Projekts als auch bei den 57 des GetOrganelle-Preprints.
Um zu ermitteln ob ein Chloroplast komplett erstellt wurde, wurden zum einen die Ergebnisse der Programme mit einem
Skript *ANHANG ev_scripts* gescannt, als auch die ausgegebene fasta Datei überprüft ob diese eine Sequenz enthält
und in den Grenzen eines Chloroplasten Genoms liegt. 
**** Geschwindigkeit
Einer der weniger entscheidenden aber dennoch wichtigen Punkte nach dem gefiltert wurde ist die Geschwindigkeit, 
oder besser die Laufzeit der Programme. Zunächst wurde hier die Durchschnitts zeit genommen die der Prozess zum rechnen benötigt,
anschließend wurde mit dem time linux Kommando die CPU als auch die Realzeit gemessen.
**** Benötigte Ressourcen
Ein weiterer Punkt nachdem aussortiert wurde ist der benötigte RAM verbrauch. Es wurden verschiedene Größen von Dateien verwendet
um in Erfahrung zu bringen wie sich dies auf Ressourcen und Laufzeit auswirkt. Zudem wurde zum Ausführen der Dockercontainer 
Singularity [28] verwendet, welches die benötigte Laufzeit und die benötigten Ressourcen beeinflusst.

  
** Erzeugen von Chloroplasten aus genomischen Daten
Um so viele Chloroplasten wie möglich aus den genomischen Daten des 1001 Genom Projekts raus zu holen, wurden der fast-plast und der chloroExtractor benutzt.
Diese wurden mit Hilfe eines Dockercontainers und einigen Skripts (s. Anhang) voll automatisiert. Sodass nur ein Befehl nötig war um die komplette 
Pipeline zu starten und auszuwerten. 

** Varianz Analyse
Um mehr über die Chloroplasten und deren Verbreitung, sowie Mutationsrate und somit Varianz zu erfahren wurden zwei verschiedene Varianzanalysen durchgeführt. 
Zunächst sollte überprüft werden welche Einflüsse die Programme und ihre Strategien den Chloroplasten zu assemblieren, speziell deren Assambler auf die Varianz der 
entstehenden Chloroplasten hat. Hierzu wurden die assamblierten Chloroplasten, welche beide verwendeten Programme gemeinsam hatten verwendet. Diese Läufe wurden zunächst
zehn fach wiederholt, auch um einen Eindruck über die Reproduzierbarkeit der Ergebnisse zu bekommen. Diese Chloroplasten wurden anschließend mit minimap2 [32] auf das 
Referenzgenom ( TAIR10 chloroplast [33] ) gemapt. Hiernach wurde eine Varianzanalyse mit Samtools[34] durchgeführt, hierzu wurde der Befehl
'mpileup/bcftools call' [35] verwendet. Dieser führt eine Varianzanalyse bzw. ein SNP calling durch. Die zweite Varianzanalyse wurde auf allen Chloroplasten welche aus dem
1001 Genom Projekt gebaut wurden erstellt. Auch diese wurden auf den Referenzchloroplasten mit minimap2 kartiert und anschließend mit samtools' 'mpileup' Funktion einem
SNP calling unterzogen. 

** GWAS
Häufig wird eine GWAS über das komplette Genom berechnet. Doch können auch einzelne Chromosomen oder Organellen bereits signifikante Varianten besitzen. 
So soll mit dieser GWAS der Einfluss von Chloroplasten Varianten auf Eigenschaften der A.Thaliana getestet werden. Hierzu wurden die SNP callings aus der Varianzanalyse verwendet.
Verschiedene Trait-Tabellen wurden von Arapheno[37], einer Trait Datenbank für A.Thaliana, heruntergeladen und zusammen mit den Varianzanalyse Daten in ein R[36] Skript gegeben.
Dieses R Skript nutzt zunächst vcfR[38], ein R Paket, um die verschiedenen VCF (Variance Calling File) Daten einzulesen. Anschließend ruft es ein weiteres R Skript auf welches
freundlicher weiße von Korte et. al[31] zur Verfügung gestellt wurde und eine GWAS Analyse durchführt.

** Struktur Varianz Analyse
Wie bereits erwähnt können Chloroplasten auch verschiedene Strukturelle Änderungen evolvieren. Diese sind durch die Rohdaten, welche meist short-reads sind, nicht aufzudecken.
Da diese zu kurz sind um komplette Struktur Varianten zu überspannen.[39]
Hierzu könnten nun die komplett de novo Assemblierten Chloroplasten verwendet werden. 

** Neue Chloroplasten
Um neue Chloroplasten zu finden, welche noch nicht in der CP-Base [40][41] Datenbank sind, wurde eine Liste von Möglichen Daten von NCBI mit CP-Base verglichen. Nur 49 Datensätze waren ohne 
Eintrag in CP-base und hatten somit noch keinen Dokumentierten Chloroplasten. Auf diese 49 Datensätze wurden sowohl der chloroExtractor als auch der fast-plast angewendet. 
Um die NCBI liste von Interessanten Daten zu erhalten wurde mit folgendem Befehl gesucht: 
' ((((((("green plants"[orgn]) AND "wgs"[Strategy]) AND "illumina"[Platform]) AND "biomol dna"[Properties]) AND "paired"[Layout]) AND "random"[Selection])) AND "public"[Access]'
Mit einem Skript (s. Anhang, cpbase.sh) wurden alle Spezies Einträge von CP-base geladen welche einen Chloroplasten besitzen. Anschließend wurde mit einem folgendem Perl-Einzeiler
die Datensätze herausgegeben welche noch keinen Eintrag in CP-base haben.
'perl -F"," -ane 'print if $F[6]>399 and $F[3]>999999' SraRunInfo_plants.csv | grep -vf species_cpbase.list | sort -u -t, -k29,29 | shuf'


* Ergebnisse
** Automatisierung
Um eine Automatisierung aller Programme zu erreichen wurde für jedes Programm ein Dockercontainer gebaut welcher mit Singularity verwendet wird. Zudem wird die komplette Auswertung von Skripts 
übernommen. Um dies zu Bewerkstelligen wurden mehrere Skripte geschrieben welche sich gegenseitig aufrufen um den kompletten Ablauf sicherzustellen.

*TODO: DIAGRAMM ABLAUF*

** Daten: Simulierte Daten 
Die Simulierten Daten, welche mit ART[6][7] erzeugt wurden um das verhalten der Programme bei verschiedenen Verhältnissen zu testen, konnten von drei Programmen, dem chloroExtractor, fast-plast und Org.ASM 
bei allen drei Datensätzen geschafft werden. Diese bauen einen vollständigen zirkulären zu bauen. NOVOPlasty baut zwar auch einen kompletten Chloroplasten doch gibt dieser 
nur die drei verschieden contigs aus (IR, SSC, LSC), und schafft es nicht diese in einen zirkulären Chloroplasten zu vereinen. GetOrganelle wie auch der IOGA schaffen es nicht die
simulierten Datensetz zusammen zu bauen da sie mit einem Fehler abbrechen oder wie im falle des IOGA nach zwei Wochen laufzeit abgebrochen werden. (s. Tabelle 1) 

#+LATEX: \begin{table}[!h]
#+ATTR_latex: :align lrrrrrr
#+LATEX: \caption[Test Datensatz: Simmulierte Daten]{\textbf{Test Datensatz: Simmulierte Daten} S steht für Success, E für Error, die angegebene Zahl steht für die anzahl der Contigs }
|     Sim(Genome:Chloroplast) | CE | FP | NP  | GO | OA | IOGA |
|                             |    |    |     |    |    |      |
|-----------------------------+----+----+-----+----+----+------|
|                        1:10 | S  | S  | S-3 | E  | S  | E    |
|                       1:100 | S  | S  | S-3 | E  | S  | -    |
|                      1:1000 | S  | S  | S-3 | E  | S  | -    |
#+LATEX: \end{table}

** Daten: 1001 Genom Projekt, 11 Testdatensätze
Aus den Daten des 1001 Genom Projekts [26] wurden zunächst elf Testdatensätze verwendet um auch reale Daten auf allen Programmen zu Testen.
Von den elf Testdatensätzen des 1001 Genom Projekts konnten sechs verschiedene vollständige zirkuläre Chloroplasten zusammengebaut werden. Von diesen
sechs bringt der fast-plast fünf ein und der chloroExtractor einen. Keines der anderen Programme konnte einen weiteren 
zirkulären Chloroplasten erzeugen (s. Tab.2). Da GetOrgranelle einen händischen Schritt in der Auswertung beinhaltet wurden diese
nicht erzeugt, da eine Automatisierung aller Schritte essenziell für eine hochdurchsatz Methode ist.

#+LATEX: \begin{table}[!h]
#+ATTR_latex: :align lrrrrrr
#+LATEX: \caption[Test Datensatz: 1001 Genom Project, 11 Datensätze]{\textbf{Test Datensatz: 1001 Genom Project} S steht für Success, E für Error, I für Incomplete, die angegebene Zahl steht für die Anzahl der Contigs }

| SRA        | CE  | FP | NP  | GO | OA | IOGA |   |
|            |     |    |     |    |    |      |   |
|------------+-----+----+-----+----+----+------+---|
| SRR1945435 | I-5 | I  | I-4 | *  | E  | I-6  |   |
| SRR1945436 | I-6 | S  | I-3 | *  | I  | I-8  |   |
| SRR1945437 | I-5 | I  | I-4 | *  | I  | I-10 |   |
| SRR1945438 | S-3 | S  | I-6 | *  | E  | I-10 |   |
| SRR1945439 | I-4 | S  | I-1 | *  | I  | I-10 |   |
| SRR1945440 | I-4 | S  | E   | *  | E  | I-9  |   |
| SRR1945441 | I-5 | S  | E   | *  | I  | I-6  |   |
| SRR1945442 | I-4 | I  | I-1 | *  | -  | -    |   |
| SRR1945443 | S   | I  | I-2 | *  | I  | I-8  |   |
| SRR1945444 | I-4 | I  | E   | *  | I  | I-8  |   |
| SRR1945445 | I-4 | I  | E   | *  | E  | I_7  |   |
#+LATEX: \end{table}

** Daten: GO-Preprint
Um mehr Daten zu testen, wurden alle 57 Datensätze des GetOrganelle Papers [19] benutzt.
Von 57 Datensätzen, welche im GetOrganelle Paper verwendet wurden, konnten 40 mit allen Programmen fertig gestellt werden (s. Tab. 3).
Alleine der fast-plast hat dabei 31 Stück zu einem zirkulären Chloroplasten zusammengebaut. Zusammen mit den 14 des chloroExtractors
konnten die 40 geschafften Chloroplasten komplett abgedeckt werden. *Komplette Tabelle im Anhang*

#+LATEX: \begin{table}[!h]
#+ATTR_latex: :align lrrrrrrrr
#+LATEX: \caption[Test Datensatz: GetOrganelle Preprint, 11 Datensätze]{\textbf{Test Datensatz: GetOrganelle Preprint} 40 von 57 Datensätze konnten komplett gelöst werden.}
| Tool    | SUCCESS | %    | ERROR | PARTIAL | INCOMPl | NO_PAIR | Total |
| CE      |      14 | ~26% |    11 |      17 |      12 |       3 |       |
| FP      |      31 | ~57% |     0 |      18 |       5 |       3 |       |
| GO      |       2 | ~4%  |    21 |      26 |       5 |       3 |       |
| IOGA    |       0 | ~0%  |    22 |      28 |       4 |       3 |       |
| NP      |       7 | ~13% |    19 |       8 |      20 |       3 |       |
| OA      |      11 | ~20% |    36 |       4 |       3 |       3 |       |
| Summary |      40 | ~74% |     - |       - |       - |       3 |    57 |

#+LATEX: \end{table}


** Die Sieger *besser Überschrift finden...?*
Da aus Zeitlichen und Hardware Technischen gründen nicht alle Programme weiterverwendet werden konnten, wurde nach Erfolgsrate, Geschwindigkeit und benötigten Ressourcen
gefiltert, am wichtigsten war aber die Automatisierbarkeit der Programme. Bis auf der GetOrganelle konnte für jedes Programm eine Automatisierbarkeit
erwirkt werden. Der GetOrganelle benötigt das öffnen der fastg Datei in einem Visualisierungs Programm für fastg-Graphen, hier wird Bandage empfohlen.
Bandage hat allerdings eine schlechte Kommandozeilen Anbindung wodurch auch keine Automatisierbarkeit durch Skripts erfolgen konnte.
Die Laufzeiten der Programme unterscheiden sich sehr, von 30 Minuten bis über eine Stunde, auch die RAM werte sind sehr unterschiedlich, diese
reichen von wenigen 20 Gigabyte bis zu 60 Gigabyte. All diese Werte sind Durchschnittswerte, da verschiedene Größen von Dateien als Eingabe verwendet wurden, da nicht alle
Dateien die gleiche Anzahl an Reads hatten. Sowie die Größen der einzelnen Reads sich unterschieden. Diese reichten von 100 Basen paare bis zu 200 Basen paare, Anzahl der Reads
und somit Größe der Dateien reichten von eine Millionen Reads bis zu 3 Millionen Reads. Die Laufzeiten sind, vor allem bei Programmen mit vielen Abhängigkeiten, erhört. Da zum nutzen
der Dockercontainer Singularity [28] verwendet wurde.    
#+LATEX: \begin{table}[!h]
#+ATTR_latex: :align lrr
#+LATEX: \caption[Laufzeit und Ressourcenverbrauch]{\textbf{Laufzeit und Ressourcenverbauch} Alle Laufzeiten sind Durchschnittsdaten, RAM werte zu Peakzeiten.}
| Tool | Laufzeit  | RAM     |
|------+-----------+---------|
| CE   | ~  30 min | ~ 20 GB |
| FP   | ~  60 min | ~ 60 GB |
| GO   | ~  40 min | ~ 50 GB |
| IOGA | ~ 100 min | ~ 40 GB |
| NP   | ~  30 min | ~ 30 GB |
| OA   | ~  60 min | ~ 30 GB |
|      |           |         |
#+LATEX: \end{table}    
Die Programme welche in oben genannten Punkte überzeugt haben sind der fast-plast und der chloroExtractor. Der fast-plast benötigt zwar die 
meisten Ressourcen und ist nicht der schnellste, aber hat mit Abstand die größte Erfolgschance. Zudem ist er voll automatisierbar und erreicht 
dies mit den vorgegebenen Standard Parametern. Als zweites Programm wird der chloroExtractor verwendet, dieser ist schnell, Ressourcen arm und hat nach dem
fast-plast die zweithöchste Erfolgsrate. Mit beiden Programmen konnten alle 40 von 57 Chloroplasten der GetOrganelle-Preprint Daten berechnet werden.
Auch die anderen Daten zeigen dass es keinen Vorteil bringt ein drittes Programm mit zu verwenden, da keines der anderen Programme einen
Chloroplasten finden konnte welche nicht schon durch den fast-plast oder den chloroExtractor gefunden wurde. Zudem haben diese beiden Programme die wenigsten
Probleme bei der Handhabung wie auch bei der Installation zu beginn gemacht. Sie sind durch die gegebenen Parameter einfach zu verwenden und zu Automatisieren.
Die von den Programmen geschriebenen Log Dateien sind einfach gehalten um dem Ablauf zu folgen und klar verständlich, der fast-plast gibt sogar drei dieser
Dateien aus, da er unterscheidet zwischen Warn- und Fehlermeldungen und Standard Meldungen, und eine Datei für den Output der eingebundenen Programme. 
Der chloroExtractor gibt seine Kompletten Meldungen über ein übergeordnetes Programm aus, welche den Ablauf steuert. Dieses Programm gibt alles auf STDERROR aus und 
kann damit einfach mit gelogt werden, oder wie in diesem Fall über die slurm Datei, welche von dem verwendeten queueing System ausgegeben wird. 
Diese beiden Programme wurden auf allen Daten des 1001 Genom Projekts laufen gelassen, um möglichst viele Chloroplasten zu generieren. 
** 1001 Genom Projekt
Ziel so viele Chloroplasten wie möglich vollautomatisch aus kompletten Genom Datensätze zu erzeugen, wofür zwei Programme ausgewählt worden sind, wurde zunächst auf Datensätzen 
des 1001 Genom Projekt versucht.
Von den 1135 Datensätzen welche im 1001 Genom Projekt gesammelt wurden, konnten 946 verwendet werden. Die restlichen 189 konnten nicht richtig heruntergeladen werden. Zudem waren 47 Datensätze keine
paired end Datensätze, und konnten deshalb nicht verwendet werden. Von diesen 899 restlichen Datensätzen konnten mit dem fast-plast und dem chloroExtractor 303 komplette zirkuläre Chloroplasten 
vollautomatisch gebaut werden, dies entspricht etwa 34%. (Tab. 4). 
#+LATEX: \begin{table}[!h]
#+ATTR_latex: :align lrrrrrr
#+LATEX: \caption[Datensatz: 1001 Genom Project]{\textbf{Datensatz: 1001 Genom Project} SUCCESS, echte zirkuläre Chloroplasten. Error, Fehler oder Abbrüche im Programm. Partial, keine zirkulären Chloroplasten aber contigs richtig identifiziert. Incomplete, Nicht richtig identifizierte Chloroplasten.}

| Tool    | SUCCESS | %    | ERROR | PARTIAL | INCOMPLETE | NO_PAIR | Total |
| CE      |     136 | ~15% |    54 |       3 |        706 |         |       |
| FP      |     266 | ~30% |    29 |      11 |        593 |         |       |
| Summary |     303 | ~34% |     - |       - |          - |     47  | 946   |
#+LATEX: \end{table}

** Varianz Analyse 
Die zunächst durchgeführte Varianz Analyse, welchen Einfluss die verschiedenen Assambler bzw. das Komplette Programm hat, ergab dass der chloroExtractor und somit auch SPAdes keinen Einfluss hierauf hat. Alle zehn
Durchläufe auf den 89 Datensätzen waren identisch. Der chloroExtractor hat somit keine zufälligen Effekte welche evtl durch zufälliges Auswählen der Daten hervorgerufen wird. Der fast-plast hingegeben hat solche 
Effekte, hier kam es bei den zehn Durchläufen dazu dass bis zu neun verschiedene Datensätze nicht mehr Erfolgreich beendet werden konnten. Hier waren die Chloroplasten entweder zu groß oder zu klein. Interessanter weiße
waren aber nicht immer die gleichen Datensätze betroffen, was eindeutig auf einen Zufalls Effekt hindeutet. Somit ist nicht auszuschließen das der fast-plast auch einen Effekt auf das SNP calling hat. 
Die Analyse auf den 303 Chloroplasten ergab, dass 2128 verschiedene SNPs gefunden wurde.
** GWAS


* Referenzen

[1] (Raubeson and Jansen 2005)
[2] Wolfe et al. 1987
[3] Jansen RK, Wojciechowski MF, Sanniyasi E, Lee S-B, Daniell H. Complete plastid genome sequence of the chickpea (Cicer arietinum) and the phylogenetic distribution of rps12 and clpP intron losses among legumes (Leguminosae). Molecular phylogenetics and evolution. 2008;48(3):1204-1217. doi:10.1016/j.ympev.2008.06.013.
[4] Palmer et al. 1988
[5]  Kane et al. (2012)
[6] Weichun Huang, Leping Li, Jason R. Myers, Gabor T. Marth; ART: a next-generation sequencing read simulator, Bioinformatics, Volume 28, Issue 4, 15 February 2012, Pages 593–594, https://doi.org/10.1093/bioinformatics/btr708
[7] https://www.niehs.nih.gov/research/resources/software/biostatistics/art/index.cfm
[8] https://www.ncbi.nlm.nih.gov/assembly/GCF_000001735.3/
[9] Ankenbrand et al., (2018). chloroExtractor: extraction and assembly of the chloroplast genome from whole genome shotgun data. Journal of Open Source Software, 3(21), 464, https://doi.org/10.21105/joss.00464
[10] https://github.com/chloroExtractorTeam/chloroExtractor
[11] Christiam Camacho, George Coulouris, Vahram Avagyan, Ning Ma, Jason Papadopoulos, Kevin Bealer and Thomas L MaddenEmail author, BMC Bioinformatics200910:421 https://doi.org/10.1186/1471-2105-10-42
[12]  Guillaume Marcais and Carl Kingsford, A fast, lock-free approach for efficient parallel counting of occurrences of k-mers. Bioinformatics (2011) 27(6): 764-770 (first published online January 7, 2011) doi:10.1093/bioinformatics/btr011
[13] https://github.com/mrmckain/Fast-Plast
[14] https://github.com/ndierckx/NOVOPlasty
[15] Dierckxsens N., Mardulyn P. and Smits G. (2016) NOVOPlasty: De novo assembly of organelle genomes from whole genome data. Nucleic Acids Research, doi: 10.1093/nar/gkw955
[16] https://pythonhosted.org/ORG.asm/
[17] https://git.metabarcoding.org/org-asm/org-asm/wikis/home
[18] https://github.com/Kinggerm/GetOrganelle
[19] Jian-Jun Jin*, Wen-Bin Yu*, Jun-Bo Yang, Yu Song, Ting-Shuang Yi, De-Zhu Li. 2018. GetOrganelle: a simple and fast pipeline for de novo assembly of a complete circular chloroplast genome using genome skimming data. bioRxiv, 256479. http://doi.org/10.1101/256479
[20] Langmead B, Salzberg S. Fast gapped-read alignment with Bowtie 2. Nature Methods. 2012, 9:357-359.
[21] https://github.com/holmrenser/IOGA
[22] Bakker et al. 2015, Herbarium genomics: plastome sequence assembly from a range of herbarium specimens using an Iterative Organelle Genome Assembly pipeline, Biol. J. Linnean Soc.
[23] https://jgi.doe.gov/data-and-tools/bbtools/
[24] Bankevich A., Nurk S., Antipov D., Gurevich A., Dvorkin M., Kulikov A. S., Lesin V., Nikolenko S., Pham S., Prjibelski A., Pyshkin A., Sirotkin A., Vyahhi N., Tesler G., Alekseyev M. A., Pevzner P. A. SPAdes: A New Genome Assembly Algorithm and Its Applications to Single-Cell Sequencing.	Journal of Computational Biology, 2012 
[25] Luo R, Liu B, Xie Y, et al. SOAPdenovo2: an empirically improved memory-efficient short-read de novo assembler. GigaScience. 2012;1:18. doi:10.1186/2047-217X-1-18.
[26] http://1001genomes.org/
[27] https://pythonhosted.org/ORG.asm/algorithms.html
[28] https://singularity.lbl.gov/
[29] https://www.pacb.com/ 
[30] https://www.illumina.com/
[31] Korte A, Farlow A. The advantages and limitations of trait analysis with GWAS: a review. Plant Methods. 2013;9:29. doi:10.1186/1746-4811-9-29.
[32] Li, H. (2018). Minimap2: pairwise alignment for nucleotide sequences. Bioinformatics. doi:10.1093/bioinformatics/bty191
[33] https://www.ncbi.nlm.nih.gov/nuccore/NC_000932.1
[34] Li H, Handsaker B, Wysoker A, Fennell T, Ruan J, Homer N, Marth G, Abecasis G, Durbin R, and 1000 Genome Project Data Processing Subgroup, The Sequence alignment/map (SAM) format and SAMtools, Bioinformatics (2009) 25(16) 2078-9 [19505943]
[35] Li H, A statistical framework for SNP calling, mutation discovery, association mapping and population genetical parameter estimation from sequencing data, Bioinformatics (2011) 27(21) 2987-93. [21903627]
[36] https://www.r-project.org/
[37] https://arapheno.1001genomes.org/
[38] https://cran.r-project.org/web/packages/vcfR/index.html
[39] 1001 Genomes Consortium 1,135 genomes reveal the global pattern of polymorphism in Arabidopsis thaliana. Cell. 2016;166:481–491. [PubMed]
[40] http://rocaplab.ocean.washington.edu/old_website/tools/cpbase
[41] http://rocaplab.ocean.washington.edu/tools/cpbase_test/
[42] Tonti‐Filippini, J. , Nevill, P. G., Dixon, K. and Small, I. (2017), What can we do with 1000 plastid genomes?. Plant J, 90: 808-818. doi:10.1111/tpj.13491
[43] Massouh A, Schubert J, Yaneva-Roder L, et al. Spontaneous Chloroplast Mutants Mostly Occur by Replication Slippage and Show a Biased Pattern in the Plastome of Oenothera. The Plant Cell. 2016;28(4):911-929. doi:10.1105/tpc.15.00879.
[44] Greiner S, Sobanski J, Bock R. Why are most organelle genomes transmitted maternally? Bioessays. 2015;37(1):80-94. doi:10.1002/bies.201400110.
[45] Wicke S, Schneeweiss GM, dePamphilis CW, Müller KF, Quandt D. The evolution of the plastid chromosome in land plants: gene content, gene order, gene function. Plant Molecular Biology. 2011;76(3-5):273-297. doi:10.1007/s11103-011-9762-4.
[46]
[47]
[48]
[49]

* Abbildungs- und Tabellenverzeichnis
\listoffigures

\listoftables
* Anhang
#+LATEX: \section*{Eigenständigkeitserklärung}
ERKLÄRUNG gemäß ASPO § 21 Abs. 10\\[10mm]
Hiermit versichere ich, dass ich vorliegende Arbeit selbstständig verfasst, keine anderen als
die angegebenen Quellen und Hilfsmittel benutzt und die Arbeit bisher oder gleichzeitig
keiner anderen Prüfungsbehörde unter Erlangung eines akademischen Grades
vorgelegt habe.\\[20mm]
Würzburg, \today \hfill Simon Pfaff
#+LATEX: \clearpage

#  LocalWords:  Bash Skripte


